/* tslint:disable */
/* eslint-disable */
/**
 * Marron API
 * API of Marron
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Member,
  Project,
  ProjectCreate,
  ProjectUpdate,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MemberFromJSON,
    MemberToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectCreateFromJSON,
    ProjectCreateToJSON,
    ProjectUpdateFromJSON,
    ProjectUpdateToJSON,
} from '../models';

export interface ProjectAddUserRequest {
    projId: string;
    userId: string;
}

export interface ProjectCreateRequest {
    projectCreate: ProjectCreate;
}

export interface ProjectDelUserRequest {
    projId: string;
    userId: string;
}

export interface ProjectDeleteRequest {
    projId: string;
}

export interface ProjectGetRequest {
    orgId: string;
}

export interface ProjectUpdateRequest {
    projId: string;
    projectUpdate: ProjectUpdate;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * Add User
     */
    async projectAddUserRaw(requestParameters: ProjectAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Member>> {
        if (requestParameters.projId === null || requestParameters.projId === undefined) {
            throw new runtime.RequiredError('projId','Required parameter requestParameters.projId was null or undefined when calling projectAddUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling projectAddUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/{proj_id}/user`.replace(`{${"proj_id"}}`, encodeURIComponent(String(requestParameters.projId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberFromJSON(jsonValue));
    }

    /**
     * Add User
     */
    async projectAddUser(requestParameters: ProjectAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Member> {
        const response = await this.projectAddUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async projectCreateRaw(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projectCreate === null || requestParameters.projectCreate === undefined) {
            throw new runtime.RequiredError('projectCreate','Required parameter requestParameters.projectCreate was null or undefined when calling projectCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCreateToJSON(requestParameters.projectCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async projectCreate(requestParameters: ProjectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Del User
     */
    async projectDelUserRaw(requestParameters: ProjectDelUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projId === null || requestParameters.projId === undefined) {
            throw new runtime.RequiredError('projId','Required parameter requestParameters.projId was null or undefined when calling projectDelUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling projectDelUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/{proj_id}/user`.replace(`{${"proj_id"}}`, encodeURIComponent(String(requestParameters.projId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Del User
     */
    async projectDelUser(requestParameters: ProjectDelUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.projectDelUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async projectDeleteRaw(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projId === null || requestParameters.projId === undefined) {
            throw new runtime.RequiredError('projId','Required parameter requestParameters.projId was null or undefined when calling projectDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/{proj_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(requestParameters.projId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete
     */
    async projectDelete(requestParameters: ProjectDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.projectDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get
     */
    async projectGetRaw(requestParameters: ProjectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Project>>> {
        if (requestParameters.orgId === null || requestParameters.orgId === undefined) {
            throw new runtime.RequiredError('orgId','Required parameter requestParameters.orgId was null or undefined when calling projectGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.orgId !== undefined) {
            queryParameters['org_id'] = requestParameters.orgId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
    }

    /**
     * Get
     */
    async projectGet(requestParameters: ProjectGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Project>> {
        const response = await this.projectGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async projectUpdateRaw(requestParameters: ProjectUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.projId === null || requestParameters.projId === undefined) {
            throw new runtime.RequiredError('projId','Required parameter requestParameters.projId was null or undefined when calling projectUpdate.');
        }

        if (requestParameters.projectUpdate === null || requestParameters.projectUpdate === undefined) {
            throw new runtime.RequiredError('projectUpdate','Required parameter requestParameters.projectUpdate was null or undefined when calling projectUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/project/{proj_id}`.replace(`{${"proj_id"}}`, encodeURIComponent(String(requestParameters.projId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateToJSON(requestParameters.projectUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async projectUpdate(requestParameters: ProjectUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.projectUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
