/* tslint:disable */
/* eslint-disable */
/**
 * Marron API
 * API of Marron
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Idea,
  IdeaCreate,
  IdeaUpdate,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    IdeaFromJSON,
    IdeaToJSON,
    IdeaCreateFromJSON,
    IdeaCreateToJSON,
    IdeaUpdateFromJSON,
    IdeaUpdateToJSON,
} from '../models';

export interface IdeaCreateRequest {
    ideaCreate: IdeaCreate;
}

export interface IdeaDeleteRequest {
    ideaId: string;
}

export interface IdeaGetRequest {
    prjId: string;
}

export interface IdeaUpdateRequest {
    ideaId: string;
    ideaUpdate: IdeaUpdate;
}

/**
 * 
 */
export class IdeaApi extends runtime.BaseAPI {

    /**
     * Create
     */
    async ideaCreateRaw(requestParameters: IdeaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Idea>> {
        if (requestParameters.ideaCreate === null || requestParameters.ideaCreate === undefined) {
            throw new runtime.RequiredError('ideaCreate','Required parameter requestParameters.ideaCreate was null or undefined when calling ideaCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/idea/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdeaCreateToJSON(requestParameters.ideaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdeaFromJSON(jsonValue));
    }

    /**
     * Create
     */
    async ideaCreate(requestParameters: IdeaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Idea> {
        const response = await this.ideaCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async ideaDeleteRaw(requestParameters: IdeaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.ideaId === null || requestParameters.ideaId === undefined) {
            throw new runtime.RequiredError('ideaId','Required parameter requestParameters.ideaId was null or undefined when calling ideaDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/idea/{idea_id}`.replace(`{${"idea_id"}}`, encodeURIComponent(String(requestParameters.ideaId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete
     */
    async ideaDelete(requestParameters: IdeaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.ideaDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get
     */
    async ideaGetRaw(requestParameters: IdeaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Idea>>> {
        if (requestParameters.prjId === null || requestParameters.prjId === undefined) {
            throw new runtime.RequiredError('prjId','Required parameter requestParameters.prjId was null or undefined when calling ideaGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.prjId !== undefined) {
            queryParameters['prj_id'] = requestParameters.prjId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/idea/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdeaFromJSON));
    }

    /**
     * Get
     */
    async ideaGet(requestParameters: IdeaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Idea>> {
        const response = await this.ideaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update
     */
    async ideaUpdateRaw(requestParameters: IdeaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Idea>> {
        if (requestParameters.ideaId === null || requestParameters.ideaId === undefined) {
            throw new runtime.RequiredError('ideaId','Required parameter requestParameters.ideaId was null or undefined when calling ideaUpdate.');
        }

        if (requestParameters.ideaUpdate === null || requestParameters.ideaUpdate === undefined) {
            throw new runtime.RequiredError('ideaUpdate','Required parameter requestParameters.ideaUpdate was null or undefined when calling ideaUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/idea/{idea_id}`.replace(`{${"idea_id"}}`, encodeURIComponent(String(requestParameters.ideaId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IdeaUpdateToJSON(requestParameters.ideaUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdeaFromJSON(jsonValue));
    }

    /**
     * Update
     */
    async ideaUpdate(requestParameters: IdeaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Idea> {
        const response = await this.ideaUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
