/* tslint:disable */
/* eslint-disable */
/**
 * Marron API
 * API of Marron
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface FileLsRequest {
    fullPath: string;
    prjId: string;
    file?: Blob;
}

export interface FileLs0Request {
    fullPath: string;
    prjId: string;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * Ls
     */
    async fileLsRaw(requestParameters: FileLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fullPath === null || requestParameters.fullPath === undefined) {
            throw new runtime.RequiredError('fullPath','Required parameter requestParameters.fullPath was null or undefined when calling fileLs.');
        }

        if (requestParameters.prjId === null || requestParameters.prjId === undefined) {
            throw new runtime.RequiredError('prjId','Required parameter requestParameters.prjId was null or undefined when calling fileLs.');
        }

        const queryParameters: any = {};

        if (requestParameters.prjId !== undefined) {
            queryParameters['prj_id'] = requestParameters.prjId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/file/{full_path}`.replace(`{${"full_path"}}`, encodeURIComponent(String(requestParameters.fullPath))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Ls
     */
    async fileLs(requestParameters: FileLsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.fileLsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ls
     */
    async fileLs_1Raw(requestParameters: FileLs0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.fullPath === null || requestParameters.fullPath === undefined) {
            throw new runtime.RequiredError('fullPath','Required parameter requestParameters.fullPath was null or undefined when calling fileLs_1.');
        }

        if (requestParameters.prjId === null || requestParameters.prjId === undefined) {
            throw new runtime.RequiredError('prjId','Required parameter requestParameters.prjId was null or undefined when calling fileLs_1.');
        }

        const queryParameters: any = {};

        if (requestParameters.prjId !== undefined) {
            queryParameters['prj_id'] = requestParameters.prjId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/file/{full_path}`.replace(`{${"full_path"}}`, encodeURIComponent(String(requestParameters.fullPath))),
            method: 'TRACE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Ls
     */
    async fileLs_1(requestParameters: FileLs0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.fileLs_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
